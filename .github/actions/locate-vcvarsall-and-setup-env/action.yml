name: 'Locate vcvarsall and Setup Environment'
description: 'Locates vcvarsall.bat, sets up the environment, and handles PATH updates.'
inputs:
  architecture:
    description: 'Target architecture (x64 or x86)'
    required: true
    default: 'x64'  #It is better to make it required.
runs:
  using: "composite"
  steps:
    - name: Locate vcvarsall and update environment
      id: locate-vcvarsall
      shell: cmd
      run: |
        @echo off
        set vswherepath="%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe"
        set vcvarsall_arch=${{ inputs.architecture }}
        if "%vcvarsall_arch%" == "x86" (
          set vcvarsall_arch=x86
        ) else (
          set vcvarsall_arch=x64
        )

        for /f "usebackq delims=" %%i in (`"%vswherepath%" -latest -property installationPath`) do (
          if exist "%%i\\VC\\Auxiliary\\Build\\vcvars%vcvarsall_arch%.bat" (
            set "vcvarsall=%%i\\VC\\Auxiliary\\Build\\vcvars%vcvarsall_arch%.bat"
          )
        )

        echo "vcvarsall will be used as the VC compiler: %vcvarsall%"
        echo "::save-state name=vcvarsall::%vcvarsall%"

        REM Get initial environment variables
        set > initial_env.txt

        REM Call vcvarsall.bat
        call "%vcvarsall%"

        REM Get environment variables after calling vcvarsall.bat
        set > final_env.txt

        REM Find new or modified environment variables using Python
        python - <<EOF
        import os
        import re

        def read_env_file(filepath):
            env_vars = {}
            with open(filepath, 'r') as f:
                for line in f:
                    match = re.match(r'^(.*?)=(.*)$', line.strip())
                    if match:
                      env_vars[match.group(1)] = match.group(2)
            return env_vars

        initial_env = read_env_file('initial_env.txt')
        final_env = read_env_file('final_env.txt')

        for key, value in final_env.items():
            if key not in initial_env or initial_env[key] != value:
                if key.upper() == 'PATH':
                    new_paths = value.split(';')
                    initial_paths = initial_env.get('PATH','').split(';')
                    added_paths = [p for p in new_paths if p not in initial_paths and p]

                    if added_paths:
                        with open(os.environ['GITHUB_PATH'], 'a') as f:
                          for path in added_paths:
                            f.write(path + os.linesep)
                else:
                    value = value.replace('%', '%25').replace('\r', '%0D').replace('\n', '%0A')
                    print(f'Setting env name={key}::{value}')
                    print(f'::set-env name={key}::{value}')
        EOF